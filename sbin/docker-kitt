#!/bin/sh
# ----
# File:        docker-kitt
# Description: Script to use kitt.sh with a container.
# Author:      Sergio Talens-Oliag <sto@kyso.io>
# Copyright:   (c) 2022-2023 Sergio Talens-Oliag <sto@kyso.io>
# ----

set -e

# ---------
# VARIABLES
# ---------

# Relative PATH to the workdir from this script (usually . or .., empty means .)
RELPATH_TO_WORKDIR=".."

# NOTE
# ----
# The relative path means that kitt.sh is always run from the root of the
# git repo or from the user home if the script is installed in "$HOME/bin"

# Variables
IMAGE_NAME="${IMAGE_NAME:-registry.kyso.io/kyso-io/kitt}"
IMAGE_TAG="${IMAGE_TAG:-latest}"
IMAGE_URI="$IMAGE_NAME:$IMAGE_TAG"
CONTAINER_NAME="kitt"
BUILD_ARGS=""
CONTAINER_VARS="-v $HOME:$HOME"
CONTAINER_VARS="$CONTAINER_VARS -e EDITOR=vi"

# ---------
# FUNCTIONS
# ---------

# POSIX compliant version of readlinkf (MacOS does not have coreutils) copied
# from https://github.com/ko1nksm/readlinkf/blob/master/readlinkf.sh
_readlinkf_posix() {
  [ "${1:-}" ] || return 1
  max_symlinks=40
  CDPATH='' # to avoid changing to an unexpected directory
  target=$1
  [ -e "${target%/}" ] || target=${1%"${1##*[!/]}"} # trim trailing slashes
  [ -d "${target:-/}" ] && target="$target/"
  cd -P . 2>/dev/null || return 1
  while [ "$max_symlinks" -ge 0 ] && max_symlinks=$((max_symlinks - 1)); do
    if [ ! "$target" = "${target%/*}" ]; then
      case $target in
      /*) cd -P "${target%/*}/" 2>/dev/null || break ;;
      *) cd -P "./${target%/*}" 2>/dev/null || break ;;
      esac
      target=${target##*/}
    fi
    if [ ! -L "$target" ]; then
      target="${PWD%/}${target:+/}${target}"
      printf '%s\n' "${target:-/}"
      return 0
    fi
    # `ls -dl` format: "%s %u %s %s %u %s %s -> %s\n",
    #   <file mode>, <number of links>, <owner name>, <group name>,
    #   <size>, <date and time>, <pathname of link>, <contents of link>
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ls.html
    link=$(ls -dl -- "$target" 2>/dev/null) || break
    target=${link#*" $target -> "}
  done
  return 1
}

# Change to working directory (script dir + the value of RELPATH_TO_WORKDIR)
cd_to_workdir() {
  _script="$(_readlinkf_posix "$0")"
  _script_dir="${_script%/*}"
  if [ "$RELPATH_TO_WORKDIR" ]; then
    cd "$(_readlinkf_posix "$_script_dir/$RELPATH_TO_WORKDIR")"
  else
    cd "$_script_dir"
  fi
}

docker_build() {
  # Check if we are on a git repo and we have a kitt.sh script available
  if [ ! -d ".git" ] || [ ! -x "./bin/kitt.sh" ]; then
    echo "The script does not seem to be on a clone of the repository"
    echo "Aborting the build call"
    exit 1
  fi
  # Compute build args
  if [ -f "./.build-args" ]; then
    BUILD_ARGS="$(
      awk '!/^#/ { printf(" --build-arg \"%s\"", $0); }' "./.build-args"
    )"
  fi
  DOCKER_BUILD_COMMAND="DOCKER_BUILDKIT=1 docker build${BUILD_ARGS}"
  DOCKER_BUILD_COMMAND="$DOCKER_BUILD_COMMAND --tag '$IMAGE_TAG' ."
  ret="0"
  # Create version file
  VERSION_INFO="$(./bin/kitt.sh version)"
  echo "Build version information"
  echo "---"
  echo "$VERSION_INFO" | tee version.txt
  echo "---"
  eval "$DOCKER_BUILD_COMMAND" || ret="$?"
  rm -f version.txt
  return "$ret"
}

docker_build_prune() {
  DOCKER_BUILDKIT=1 docker builder prune -af
}

docker_exec() {
  if [ -z "$*" ]; then
    echo "Pass a command to execute inside the kitt container"
    exit 1
  fi
  [ -t "0" ] && _ti="--tty --interactive" || _ti="--interactive"
  [ "$KITT_ENVFILE" ] && _env="--env-file '$KITT_ENVFILE'" || _env=""
  _user="--user '$(id -u)'"
  DOCKER_EXEC_COMMAND="docker exec $_ti $_env $_user '$CONTAINER_NAME'"
  DOCKER_EXEC_COMMAND="$DOCKER_EXEC_COMMAND $*"
  ret="0"
  if [ "$(docker_status)" ]; then
    eval "$DOCKER_EXEC_COMMAND" || ret="$?"
  else
    docker_start >/dev/null
    eval "$DOCKER_EXEC_COMMAND" || ret="$?"
    docker_stop "0" >/dev/null
  fi
  if tty -s; then stty sane; fi
  return "$ret"
}

docker_logs() {
  docker logs "$CONTAINER_NAME"
}

docker_pull() {
  docker pull "$IMAGE_URI"
}

docker_rm() {
  docker rm "$CONTAINER_NAME"
}

docker_run() {
  if [ "$(docker_status)" ]; then
    echo "Container already running, aborting!"
    exit 1
  fi
  DOCKER_GID="$(getent group docker | cut -d: -f3)" || true
  [ -t "0" ] && _ti="--tty --interactive" || _ti="--interactive"
  [ "$KITT_ENVFILE" ] && _env="--env-file '$KITT_ENVFILE'" || _env=""
  case "$1" in
  "")
    CONTAINER_VARS="$CONTAINER_VARS $_ti $_env"
    CONTAINER_CMND=""
    ;;
  daemon)
    CONTAINER_VARS="$CONTAINER_VARS -d"
    CONTAINER_VARS="$CONTAINER_VARS -e USER_NAME=$(id -un)"
    CONTAINER_VARS="$CONTAINER_VARS -e USER_UID=$(id -u)"
    CONTAINER_VARS="$CONTAINER_VARS -e USER_GID=$(id -g)"
    CONTAINER_VARS="$CONTAINER_VARS -e USER_HOME=$HOME"
    CONTAINER_VARS="$CONTAINER_VARS -e DOCKER_GID=$DOCKER_GID"
    CONTAINER_CMND="sleep infinity"
    ;;
  user)
    CONTAINER_VARS="$CONTAINER_VARS $_ti $_env"
    CONTAINER_VARS="$CONTAINER_VARS -e USER_NAME=$(id -un)"
    CONTAINER_VARS="$CONTAINER_VARS -e USER_UID=$(id -u)"
    CONTAINER_VARS="$CONTAINER_VARS -e USER_GID=$(id -g)"
    CONTAINER_VARS="$CONTAINER_VARS -e USER_HOME=$HOME"
    CONTAINER_VARS="$CONTAINER_VARS -e DOCKER_GID=$DOCKER_GID"
    CONTAINER_CMND=""
    ;;
  *)
    echo "Wrong argument: $1"
    exit 1
    ;;
  esac
  if [ -f "/run/docker.sock" ]; then
    _docker_sock="/run/docker.sock"
  else
    _docker_sock="/var/run/docker.sock"
  fi
  CONTAINER_VARS="$CONTAINER_VARS -v $_docker_sock:/run/docker.sock:rw"
  DOCKER_RUN_COMMAND="$(
    printf "%s" \
      "docker run --rm --name '$CONTAINER_NAME' --network host -w $HOME" \
      " $CONTAINER_VARS '$IMAGE_URI' $CONTAINER_CMND"
  )"
  eval "$DOCKER_RUN_COMMAND"
  if tty -s; then stty sane; fi
}

docker_start() {
  docker_run daemon
}

docker_status() {
  docker ps -a -f name="${CONTAINER_NAME}" --format '{{.Status}}' 2>/dev/null ||
    true
}

docker_stop() {
  secs="${1:-1}"
  docker stop "$CONTAINER_NAME" -t "$secs"
}

usage() {
  cat <<EOF
Usage: $0 CMND [ARGS]

Where CMND can be one of:
- build: create container using the passed package version
- build-prune: cleanup builder cachÃ©
- exec: execute a command inside the container (if it is not running the call
  starts and stops it, otherwise it is used and left alone)
- rar: run container in interactive mode as root
- run: run container in interactive mode as the current user
- start|stop|status|rm|pull|logs: operations on the container
EOF
}

# ----
# MAIN
# ----

cd_to_workdir
case "$1" in
build) shift && docker_build "$@" ;;
build-prune) docker_build_prune ;;
exec) shift && docker_exec "$@" ;;
logs) shift && docker_logs "$@" ;;
pull) docker_pull ;;
rm) docker_rm ;;
rar) shift && docker_run ;;
run) shift && docker_run user ;;
status) docker_status ;;
start) docker_start ;;
stop) docker_stop ;;
*) usage ;;
esac

# ----
# vim: ts=2:sw=2:et:ai:sts=2
